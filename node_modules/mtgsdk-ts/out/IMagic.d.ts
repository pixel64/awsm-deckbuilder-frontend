export declare enum Color {
    White = 0,
    Blue = 1,
    Black = 2,
    Red = 3,
    Green = 4,
}
export declare enum ColorIdentity {
    W = 0,
    U = 1,
    B = 2,
    R = 3,
    G = 4,
}
export declare enum Rarity {
    "Basic Land" = 0,
    Common = 1,
    Uncommon = 2,
    "Mythic Rare" = 3,
    Timeshifted = 4,
    Masterpiece = 5,
}
export declare enum Layout {
    normal = 0,
    split = 1,
    flip = 2,
    "double-faced" = 3,
    token = 4,
    plane = 5,
    scheme = 6,
    phenomenon = 7,
    leveler = 8,
    vanguard = 9,
}
export declare enum Legality {
    Legal = 0,
    Banned = 1,
    Restricted = 2,
}
export interface BlockLegality {
    format: string;
    legality: keyof typeof Legality;
}
export interface Card {
    name: string;
    manaCost: string;
    cmc: number;
    colors: (keyof typeof Color)[];
    colorIdentity: (keyof typeof ColorIdentity)[];
    type: string;
    supertypes: string[];
    types: string[];
    subtypes: string[];
    rarity: keyof typeof Rarity;
    set: string;
    setName: string;
    artist: string;
    flavor?: string;
    layout: keyof typeof Layout;
    multiverseid: number;
    imageUrl: string;
    variations: number[];
    printings: string[];
    originalText: string;
    originalType: string;
    legalities: BlockLegality[];
    id: string;
}
export interface CreatureCard {
    power: string;
    toughness: string;
}
export interface PlaneswalkerCard {
    loyalty: number;
}
export interface CardFilter {
    name?: string;
    layout?: string;
    cmc?: number;
    colors?: string;
    colorIdentity?: string;
    type?: string;
    supertypes?: string;
    types?: string;
    subtypes?: string;
    rarity?: string;
    set?: string;
    setName?: string;
    text?: string;
    flavor?: string;
    artist?: string;
    number?: string;
    power?: string;
    toughness?: string;
    loyalty?: number;
    foreignName?: string;
    language?: string;
    gameFormat?: string;
    legality?: keyof typeof Legality;
    page?: number;
    pageSize?: number;
    orderBy?: string;
    random?: boolean;
    contains?: string;
}
export interface PaginationFilter {
    page?: number;
    pageSize?: number;
}
export interface SetFilter {
    name?: string;
    block?: string;
}
export declare enum SetType {
    core = 0,
    expansion = 1,
    reprint = 2,
    box = 3,
    un = 4,
    "from the vault" = 5,
    "premium deck" = 6,
    "duel deck" = 7,
    starter = 8,
    commander = 9,
    planechase = 10,
    archenemy = 11,
    promo = 12,
    vanguard = 13,
    masters = 14,
}
export declare enum BoosterCardType {
    marketing = 0,
    land = 1,
    common = 2,
    uncommon = 3,
    rare = 4,
    "mythic rare" = 5,
}
export declare type Booster = (keyof typeof BoosterCardType | (keyof typeof BoosterCardType)[])[];
export interface Set {
    name: string;
    block?: string;
    code: string;
    gathererCode?: string;
    type?: string;
    oldCode?: string;
    magicCardsInfoCode?: string;
    releaseDate: string;
    border: "white" | "black" | "silver";
    expansion: keyof typeof SetType;
    onlineOnly?: true;
    booster?: Booster;
}
