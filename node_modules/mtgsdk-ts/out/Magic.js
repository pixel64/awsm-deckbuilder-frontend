"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const request = require("request-promise");
const endpoint = "https://api.magicthegathering.io/v1";
function MakeQuery(queryFor) {
    return {
        all() {
            return __awaiter(this, void 0, void 0, function* () {
                const result = yield request({
                    uri: `${endpoint}/${queryFor}`,
                    json: true,
                });
                return (queryFor in result ? result[queryFor] : queryFor);
            });
        }
    };
}
class MagicEmitter extends events_1.EventEmitter {
    constructor() {
        super(...arguments);
        this._cancelled = false;
    }
    get cancelled() {
        return this._cancelled;
    }
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
    emit(event, ...data) {
        return super.emit(event, ...data);
    }
    cancel() {
        this._cancelled = true;
    }
}
exports.MagicEmitter = MagicEmitter;
class ApiQuery {
    constructor(queryFor) {
        this.queryFor = queryFor;
    }
    find(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield request({
                uri: `${endpoint}/${this.queryFor}/${id}`,
                json: true,
            }))[this.queryFor.slice(0, -1)];
        });
    }
    where(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield request({
                uri: `${endpoint}/${this.queryFor}`,
                qs: filter,
                json: true,
            }))[this.queryFor];
        });
    }
    all(filter) {
        const emitter = new MagicEmitter();
        const getPage = (page = 1) => {
            request({
                uri: `${endpoint}/${this.queryFor}`,
                qs: Object.assign({}, filter, { page }),
                json: true,
            }).then((data) => {
                const items = data[this.queryFor];
                if (items.length > 0) {
                    for (const item of items) {
                        emitter.emit("data", item);
                        if (emitter.cancelled)
                            return emitter.emit("cancel");
                    }
                    if (items.length == (filter.pageSize || 100))
                        return getPage(page + 1);
                }
                emitter.emit("end");
            }).error((err) => emitter.emit("error", err));
        };
        getPage(filter.page);
        return emitter;
    }
}
exports.ApiQuery = ApiQuery;
class SetQuery extends ApiQuery {
    constructor() {
        super("sets");
    }
    generateBooster(setId) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield request({
                uri: `${endpoint}/sets/${setId}/booster`,
                json: true,
            })).cards;
        });
    }
}
exports.SetQuery = SetQuery;
exports.Cards = new ApiQuery("cards");
exports.Sets = new SetQuery;
exports.Types = MakeQuery("types");
exports.Subtypes = MakeQuery("subtypes");
exports.Supertypes = MakeQuery("supertypes");
exports.Formats = MakeQuery("formats");
