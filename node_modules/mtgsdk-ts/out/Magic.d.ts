/// <reference types="node" />
import { EventEmitter } from "events";
import { Card, Set, CardFilter, SetFilter, PaginationFilter } from "./IMagic";
export { Card, Set, CardFilter, SetFilter, PaginationFilter };
export declare class MagicEmitter<T> extends EventEmitter {
    private _cancelled;
    readonly cancelled: boolean;
    on(event: "data", listener: (data: T) => any): this;
    on(event: "end", listener: () => any): this;
    on(event: "cancel", listener: () => any): this;
    on(event: "error", listener: (err: Error) => any): this;
    emit(event: "data", data: T): boolean;
    emit(event: "end"): boolean;
    emit(event: "cancel"): boolean;
    emit(event: "error", error: Error): boolean;
    cancel(): void;
}
export declare class ApiQuery<ResultType = any, FilterType = any> {
    protected queryFor: string;
    constructor(queryFor: string);
    find(id: string): Promise<ResultType>;
    where(filter: FilterType): Promise<ResultType[]>;
    all(filter?: FilterType & PaginationFilter): MagicEmitter<ResultType>;
}
export declare class SetQuery extends ApiQuery<Set, SetFilter> {
    constructor();
    generateBooster(setId: string): Promise<Card[]>;
}
export declare const Cards: ApiQuery<Card, CardFilter>;
export declare let Sets: SetQuery;
export declare const Types: {
    all(): Promise<string[]>;
};
export declare const Subtypes: {
    all(): Promise<string[]>;
};
export declare const Supertypes: {
    all(): Promise<string[]>;
};
export declare const Formats: {
    all(): Promise<string[]>;
};
